[{"/Users/morimotorikuto/Desktop/react-app/src/index.js":"1","/Users/morimotorikuto/Desktop/react-app/src/App.js":"2","/Users/morimotorikuto/Desktop/react-app/src/reportWebVitals.js":"3","/Users/morimotorikuto/Desktop/react-app/src/components/DrfApiFetch.js":"4","/Users/morimotorikuto/Desktop/react-app/src/components/login.js":"5"},{"size":500,"mtime":1609860174756,"results":"6","hashOfConfig":"7"},{"size":1082,"mtime":1612165507340,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609860174756,"results":"9","hashOfConfig":"7"},{"size":14142,"mtime":1612271792694,"results":"10","hashOfConfig":"7"},{"size":6733,"mtime":1612179713617,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"xl0ttc",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":1,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"26","usedDeprecatedRules":"14"},"/Users/morimotorikuto/Desktop/react-app/src/index.js",[],["27","28"],"/Users/morimotorikuto/Desktop/react-app/src/App.js",["29","30","31"],"import logo from './logo.svg';\n//import './App.css';\nimport {react,useState} from 'react'\n\nimport DrfApiFetch from './components/DrfApiFetch'\nimport Login from './components/login'\nimport {createMuiTheme} from '@material-ui/core/styles/'\nimport {ThemeProvider as MuiThemeProvider} from '@material-ui/core/styles'\nimport indigo from '@material-ui/core/colors/indigo'\nimport { Typography } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n  palette:{\n    primary: indigo,\n    secondary: {\n      main: '#f44336'\n    },\n    typography:{\n      button:{\n        textTransform: \"none\"\n      },\n      fontFamily:'Comic Neue'\n    }\n  }\n})\n\nconst App = () =>{\n\n  const [userInfo, setUserInfo] = useState({username:\"\", token:\"\"})\n  return (    \n    <MuiThemeProvider theme={theme}>      \n    <div className=\"App\">\n      <header className=\"App-header\">      \n        { userInfo.token ?< DrfApiFetch userInfo = {userInfo}/>\n        :<Login setUserInfo = {setUserInfo}/>\n        }                      \n      </header>\n    </div>\n    </MuiThemeProvider>\n    \n  );\n}\n\nexport default App;\n","/Users/morimotorikuto/Desktop/react-app/src/reportWebVitals.js",[],"/Users/morimotorikuto/Desktop/react-app/src/components/DrfApiFetch.js",["32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48"],"import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport {LineChart, Line , XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts'\nimport moment from 'moment'\nimport { Button, makeStyles, Typography ,Box} from '@material-ui/core'\nimport Icon from '@material-ui/icons'\nimport { DeleteIcon } from '@material-ui/icons/Delete'\nimport styled from 'styled-components'\nimport spacing from '@material-ui/system'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(10),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n    margin: theme.spacing(3, 0, 2),\n    },\n    span: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        color: 'teal',\n    },\n    spanError: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        color: 'fuchsia',\n        marginTop: 10,\n    },\n    table: {\n        display: 'flex'\n    }\n}));\n\nconst DrfApiFetch = (props) => {\n    const classes = useStyles();\n    const big3Menu = [\n        {id: 1, title: \"ベンチプレス\"},\n        {id: 2, title: \"スクワット\"},\n        {id: 3, title: \"デッドリフト\"}        \n    ]\n\n    const chestMenu = [\n        {id: 1, title: \"インクラインベンチプレス\"},\n        {id: 2, title: \"ダンベルフライ\"},\n        {id: 3, title: \"ケーブルクロスオーバー\"},        \n    ]\n    \n    const backMenu = [\n        {id: 1, title: \"懸垂（順手）\"},\n        {id: 2, title: \"ベントオーバーロウ\"},\n        {id: 3, title: \"ワンハンドロウ\"},\n        {id: 4, title: \"懸垂（逆手）\"},\n    ]\n\n    const legMenu = [\n        {id: 1, title: \"レッグエクステンション\"},　\n        {id: 2, title: \"レッグカール\"},　\n        {id: 3, title: \"ブルガリアンスクワット\"},　\n    ]\n\n    const sholderMenu = [\n        {id: 1, part: \"sholder\", title: \"ショルダープレス\"},　\n        {id: 2, part: \"sholder\", title: \"サイドレイズ\"},\n        {id: 3, part: \"sholder\", title: \"リアレイズ\"}        \n    ]\n\n    const armMenu = [\n        {id:1, title: \"トライセプスエクステンション\"},\n        {id:2, title: \"ケーブルプレス\"},\n        {id:3, title: \"アームカール\"},\n        {id:4, title: \"インクラインアームカール\"},\n    ]\n    const username = props.userInfo.username\n    const token = props.userInfo.token\n    const [bigthree, setBigthree] = useState([])\n    const [selectedBigthree, setSelectedBigthree] = useState([])\n    const [id, setId] = useState([1])\n    const [editedBigthree, setEditedBigthree] = useState({id:'', weight:'',reps:'', title:'', username: username})\n    const [training, setTraining] = useState({id:'', title:'', username: username})\n    \n\n    useEffect(() => {\n        axios.get('http://127.0.0.1:8000/api/v1/bigthree/',{\n            headers: {\n                'Authorization': 'Token ${token}'\n            }\n        })\n        .then(\n            res => {setBigthree(res.data)})\n            console.log(token)\n    },[])\n\n    const getBigthree = () =>{\n        axios.get(`http://127.0.0.1:8000/api/v1/bigthree/${id}/`,{\n            headers: {\n                'Authorization': 'Token ${token}'\n            }\n        })\n        .then(res => {setSelectedBigthree(res.data)})\n    }\n\n    const editBigthree =(bigone) => {\n        axios.put(`http://127.0.0.1:8000/api/v1/bigthree/${bigone.id}/`, bigone, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Token ${token}'\n            }})\n        .then(res => {setBigthree(bigthree.map(bigone => (bigone.id === editedBigthree.id ? res.data : bigone)));\n            setEditedBigthree({id: '', weight:'', reps:'', title:'', username: username})\n        })\n    }\n\n    const handleInputChange = () => evt => {\n        const value = evt.target.value;\n        const name = evt.target.name;\n        setEditedBigthree({... editedBigthree, [name]:value})\n    }\n\n    const newTraining = (one) => {\n        const data = {\n            title: one.title,\n            weight: one.weight,\n            reps: one.reps,\n            username: username\n        }\n        axios.post(\"http://127.0.0.1:8000/api/v1/bigthree/\", data,{\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Token ${token}'\n            }})\n            .then(res => {setBigthree([...bigthree, res.data]);\n                setEditedBigthree({id: '', weight:'', reps:'', title:'', username: username})\n            })\n        }\n\n    \n    const convert = () => {\n        const result = bigthree.map(bigone => {\n            if((bigone.title === editedBigthree.title) && (bigone.username === username)){\n            return {time:moment(bigone.created_at).valueOf(),\n                    val1 : bigone.rm,\n                    val2 : bigone.weight,\n                    val3 : bigone.reps,\n                    val4 : bigone.id\n            }}\n            else {\n                return {time:false,val1:false,val2:false,val3:false,val4:false}\n            }\n        }).filter(one => {return one.time !== false})\n        result.sort((a, b) => a.time < b.time ? -1 : 1)        \n        return result\n    }\n\n    const convert2 = () => {\n        const result = bigthree.filter(one => (one.title === editedBigthree.title) && (one.username === username))\n        result.sort((a, b) => a.created_at < b.created_at ? 1 : -1)\n        return result\n    }\n\n    const tmpresult = convert2()\n    const data = convert()\n\n    const deleteTraining = (id) => {\n        axios.delete(`http://127.0.0.1:8000/api/v1/bigthree/${id}`,{\n            headers: {\n                'Authorization': 'Token ${token}'\n            }})\n            .then(res => {setBigthree(bigthree.filter(bigone => bigone.id !== id)); setSelectedBigthree([])})\n            if (editedBigthree.id === id){\n                setEditedBigthree({id: '', weight:'', reps:'', title:'', username: username})\n            }\n    }\n\n    \n\n\n    return (\n        <div className={classes.paper}>\n            <h1>あなたのトレーニングのMAX(1RM)は？</h1>                        \n            <table>                            \n            <th>\n            <h1>BIG3</h1>            \n            {big3Menu.map(one => <Box component=\"span\" m={1}>\n            <Button \n            type=\"submit\"\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"large\"\n            className={classes.submit}\n            onClick={()=>{setTraining(one);setEditedBigthree({id: '', weight:'', reps:'', title:'', username: username})}} >{ one.title }</Button></Box>\n            )}\n            <br />\n            <h1>Chest</h1>\n            {chestMenu.map(one => <Box component=\"span\" m={1}>\n            <Button \n            type=\"submit\"\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"large\"\n            className={classes.submit}\n            onClick={()=>{setTraining(one);setEditedBigthree({id: '', weight:'', reps:'', title:'', username: username})}} >{ one.title }</Button></Box>\n            )}            \n            <br />\n            <h1>Back</h1>\n            {backMenu.map(one => <Box component=\"span\" m={1}>\n            <Button \n            type=\"submit\"\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"large\"\n            className={classes.submit}\n            onClick={()=>{setTraining(one);setEditedBigthree({id: '', weight:'', reps:'', title:'', username: username})}} >{ one.title }</Button></Box>\n            )}\n            </th>\n            <th>\n            <h1>Leg</h1>\n            {legMenu.map(one => <Box component=\"span\" m={1}>\n            <Button \n            type=\"submit\"\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"large\"\n            className={classes.submit}\n            onClick={()=>{setTraining(one);setEditedBigthree({id: '', weight:'', reps:'', title:'', username: username})}} >{ one.title }</Button></Box>\n            )}\n            <br />\n            <h1>Sholder</h1>\n            {sholderMenu.map(one => <Box component=\"span\" m={1}>\n            <Button \n            type=\"submit\"\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"large\"\n            className={classes.submit}\n            onClick={()=>{setTraining(one);setEditedBigthree({id: '', weight:'', reps:'', title:'', username: username})}} >{ one.title }</Button></Box>\n            )}\n            <br />\n            <h1>Arm</h1>\n            {armMenu.map(one => <Box component=\"span\" m={1}>\n            <Button \n            type=\"submit\"\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"large\"\n            className={classes.submit}\n            onClick={()=>{setTraining(one);setEditedBigthree({id: '', weight:'', reps:'', title:'', username: username})}} >{ one.title }</Button></Box>\n            )}\n            </th>\n            </table>\n            <h3>選択中：{ editedBigthree.title = training.title }</h3>\n                <label>\n                    <TextField \n                    variant=\"outlined\" \n                    margin=\"dense\" \n                    fullWidth \n                    required\n                    name=\"weight\"\n                    label=\"weight\"\n                    value={editedBigthree.weight} \n                    Autocomplete\n                    onChange={handleInputChange()} \n                    autoFocus\n                    />\n                </label> \n                <label>\n                    <TextField \n                    variant=\"outlined\" \n                    margin=\"dense\" \n                    fullWidth \n                    required\n                    name=\"reps\"\n                    label=\"reps\"\n                    value={editedBigthree.reps} \n                    Autocomplete\n                    onChange={handleInputChange()} \n                    autoFocus\n                    />\n                </label> \n            { editedBigthree.id ? \n            <button onClick={()=>editBigthree(editedBigthree)}>Update</button> :\n            <button onClick={()=>newTraining(editedBigthree)}>Create</button> }\n            <table className={classes.table}>\n                <th>\n                    \n                <LineChart\n                width={1500}\n                height={1000}\n                data={data}\n                margin={{\n                    top:30,right:130,left:200,bottom:90,\n                }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                    dataKey=\"time\"\n                    domain={[\"auto\", \"auto\"]}\n                    tickFormatter={(t) => moment(t).format(\"YY/MM/DD\")}\n                    tick={{fontSize:30}}\n                    scale=\"time\"\n                    type=\"number\"\n                    padding={{left:50}}\n                    label={{\n                        value: \"Date\", offset: -50, position: \"insideBottomRight\", fontSize:50\n                    }}\n                />\n                < YAxis \n                    label={{ value: \"1RM(kg)\", offset:-70 ,angle:-90, position: \"insideLeft\" , fontSize:50}}\n                    domain={'dataMin','dataMax'}\n                    tick={{fontSize:30}}\n                    padding={{bottom:50}}\n                />\n                <Tooltip />\n                <Legend verticalAlign=\"top\" /> \n                <Line type=\"linear\" dataKey=\"val1\" name=\"1RM\" stroke=\"red\" dot={{ stroke: \"skyblue\", strokeWidth: 7}} unit=\"kg\"/>\n                </LineChart>\n                \n                </th>                    \n                    <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell style={{width: 300}}><h2>Date</h2></TableCell>\n                            <TableCell style={{width: 100}}><h2>weight(kg)</h2></TableCell>\n                            <TableCell style={{width: 100}}><h2>reps(回)</h2></TableCell>\n                            <TableCell style={{width: 100}}><h2>1RM(kg)</h2></TableCell>\n                            <TableCell style={{width: 20}}><h4>DEL</h4></TableCell>\n                            <TableCell style={{width: 20}}><h4>UPD</h4></TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                    {tmpresult.map((bigone) => (\n                        <TableRow >\n                        <TableCell><h4>{bigone.created_at}</h4></TableCell>\n                        <TableCell align=\"right\"><h4>{bigone.weight}</h4></TableCell>\n                        <TableCell align=\"right\"><h4>{bigone.reps}</h4></TableCell>\n                        <TableCell align=\"right\"><h4>{bigone.rm}</h4></TableCell>\n                        <TableCell>\n                        <button onClick={() => deleteTraining(bigone.id)}>\n                            <i className=\"fas fa-trash-alt\"></i>\n                        </button>\n                        </TableCell>\n                        <TableCell>\n                        <button onClick={()=>setEditedBigthree(bigone)}>\n                                <i className=\"fas fa-pen\"></i>\n                        </button>\n                        </TableCell>\n                    </TableRow>\n                    ))}\n                    </TableBody>                                    \n                </Table>                                    \n                \n            </table>\n        </div>\n    )\n}\nexport default DrfApiFetch",["49","50"],"/Users/morimotorikuto/Desktop/react-app/src/components/login.js",["51","52","53","54","55"],"import {React, useState} from 'react'\nimport axios from 'axios'\n\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport { Divider, makeStyles, Typography } from '@material-ui/core'\n\nimport TextField from '@material-ui/core/TextField';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Container from '@material-ui/core/Container';\nimport { calendarFormat } from 'moment';\n\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(10),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n    margin: theme.spacing(3, 0, 2),\n    },\n    span: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        color: 'teal',\n    },\n    spanError: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        color: 'fuchsia',\n        marginTop: 10,\n    },\n}));\n\nconst Login = (props) => {\n    const classes = useStyles();\n    const [flag, setFlag] = useState({loginerr: false, createerr: false, createdone:false})\n    const [credentials, setCredentials] = useState({username:'', password:''})\n    const [newUser, setNewUser] = useState({username:'', password:''})\n\n    const login = (evt) => {\n        const data = {\n            username: credentials.username,\n            password: credentials.password\n        }\n        \n        axios.post(\"http://127.0.0.1:8000/auth/\", data,{\n            headers: {\n                'Content-Type': 'application/json',\n            }})\n            .then(res =>{            \n                props.setUserInfo({username: credentials.username,token: res.data.token})\n            })\n            .catch(err =>{\n                setFlag({loginerr:true})\n                console.log(err)\n            })\n    }\n\n    const create = (evt) =>{\n        const data = {\n            username: newUser.username,\n            password: newUser.password\n        }\n        console.log(data)\n        axios.post(\"http://127.0.0.1:8000/api/v1/users/\", data,{\n            headers: {\n                'Content-Type': 'application/json',\n            }})\n            .then(res =>{\n                setFlag({createdone:true})\n            })\n            .catch(err =>{\n                setFlag({createerr:true})\n                console.log(err)\n                \n            })\n    }\n\n    const handleInputChange = (handle, userinfo) => evt => {\n        const value = evt.target.value;\n        const name = evt.target.name;\n        handle({... userinfo, [name]:value})\n    }    \n\n    return (\n        <Container component=\"main\" >\n            \n            <div className={classes.paper}>\n            \n                <Typography variant=\"h2\">1RM(Rep Max)管理サイト</Typography>\n                <Typography component=\"h1\" variant=\"h3\">Sign in</Typography>\n                \n                <label>\n                    <TextField \n                    variant=\"outlined\" \n                    margin=\"normal\" \n                    fullWidth \n                    required\n                    name=\"username\"\n                    label=\"ユーザー名\"\n                    value={credentials.username} \n                    Autocomplete=\"current-username\"\n                    onChange={handleInputChange(setCredentials, credentials)} \n                    autoFocus\n                    />\n                </label>\n                <label>\n                    <TextField \n                    variant=\"outlined\" \n                    margin=\"normal\" \n                    fullWidth \n                    required\n                    name=\"password\"\n                    label=\"パスワード\"\n                    value={credentials.password} \n                    Autocomplete=\"current-password\"\n                    onChange={handleInputChange(setCredentials, credentials)} \n                    autoFocus\n                    />\n                </label>\n                <br />\n                <Button \n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                onClick={() => login()}>Login</Button>\n                { flag.loginerr && (<h1>ユーザー名，もしくはパスワードが間違っています</h1>)}\n                <h4>新規登録される場合は↓↓↓</h4>\n                <Typography component=\"h1\" variant=\"h3\">Create User</Typography>\n                <label>        \n                    <TextField \n                    variant=\"outlined\" \n                    margin=\"normal\" \n                    fullWidth \n                    required\n                    name=\"username\"\n                    label=\"ユーザー名\"\n                    value={newUser.username} \n                    Autocomplete=\"current-username\"\n                    onChange={handleInputChange(setNewUser, newUser)} \n                    autoFocus\n                    />\n                </label>                \n                <label>                    \n                    <TextField \n                    variant=\"outlined\" \n                    margin=\"normal\" \n                    fullWidth \n                    required\n                    name=\"password\"\n                    label=\"パスワード\"\n                    value={newUser.password} \n                    Autocomplete=\"current-password\"\n                    onChange={handleInputChange(setNewUser, newUser)} \n                    autoFocus\n                    />\n                </label>                \n                <Button \n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                onClick={() => create()}>User create</Button>\n                { flag.createerr &&\n                <ul>\n                <h2>以下のエラーに該当しています</h2>\n                <li><h1>既に登録済みのユーザー名</h1></li>\n                <li><h1>ユーザー名，パスワードが無効な値</h1></li>\n                <h4>別のユーザー名，パスワードでリトライして下さい</h4>\n                </ul>\n                }\n                {flag.createdone &&\n                    <ul>\n                        ユーザー登録が完了しました．Login formからログインしてください．\n                    </ul>\n                }            \n            </div>\n        \n        </Container>\n    )\n}\n\nexport default Login;",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":8,"nodeType":"62","messageId":"63","endLine":1,"endColumn":12},{"ruleId":"60","severity":1,"message":"64","line":3,"column":9,"nodeType":"62","messageId":"63","endLine":3,"endColumn":14},{"ruleId":"60","severity":1,"message":"65","line":10,"column":10,"nodeType":"62","messageId":"63","endLine":10,"endColumn":20},{"ruleId":"60","severity":1,"message":"66","line":3,"column":73,"nodeType":"62","messageId":"63","endLine":3,"endColumn":92},{"ruleId":"60","severity":1,"message":"65","line":5,"column":30,"nodeType":"62","messageId":"63","endLine":5,"endColumn":40},{"ruleId":"60","severity":1,"message":"67","line":6,"column":8,"nodeType":"62","messageId":"63","endLine":6,"endColumn":12},{"ruleId":"60","severity":1,"message":"68","line":7,"column":10,"nodeType":"62","messageId":"63","endLine":7,"endColumn":20},{"ruleId":"60","severity":1,"message":"69","line":8,"column":8,"nodeType":"62","messageId":"63","endLine":8,"endColumn":14},{"ruleId":"60","severity":1,"message":"70","line":9,"column":8,"nodeType":"62","messageId":"63","endLine":9,"endColumn":15},{"ruleId":"60","severity":1,"message":"71","line":95,"column":12,"nodeType":"62","messageId":"63","endLine":95,"endColumn":28},{"ruleId":"60","severity":1,"message":"72","line":96,"column":16,"nodeType":"62","messageId":"63","endLine":96,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":104,"column":34,"nodeType":"75","messageId":"76","endLine":104,"endColumn":50},{"ruleId":"77","severity":1,"message":"78","line":110,"column":7,"nodeType":"79","endLine":110,"endColumn":9,"suggestions":"80"},{"ruleId":"60","severity":1,"message":"81","line":112,"column":11,"nodeType":"62","messageId":"63","endLine":112,"endColumn":22},{"ruleId":"73","severity":1,"message":"74","line":115,"column":34,"nodeType":"75","messageId":"76","endLine":115,"endColumn":50},{"ruleId":"73","severity":1,"message":"74","line":125,"column":34,"nodeType":"75","messageId":"76","endLine":125,"endColumn":50},{"ruleId":"82","severity":1,"message":"83","line":135,"column":31,"nodeType":"84","messageId":"85","endLine":135,"endColumn":32,"fix":"86"},{"ruleId":"73","severity":1,"message":"74","line":148,"column":34,"nodeType":"75","messageId":"76","endLine":148,"endColumn":50},{"ruleId":"73","severity":1,"message":"74","line":185,"column":34,"nodeType":"75","messageId":"76","endLine":185,"endColumn":50},{"ruleId":"87","severity":1,"message":"88","line":327,"column":38,"nodeType":"89","messageId":"90","endLine":327,"endColumn":39},{"ruleId":"56","replacedBy":"91"},{"ruleId":"58","replacedBy":"92"},{"ruleId":"60","severity":1,"message":"93","line":4,"column":8,"nodeType":"62","messageId":"63","endLine":4,"endColumn":14},{"ruleId":"60","severity":1,"message":"94","line":6,"column":10,"nodeType":"62","messageId":"63","endLine":6,"endColumn":17},{"ruleId":"60","severity":1,"message":"95","line":9,"column":8,"nodeType":"62","messageId":"63","endLine":9,"endColumn":24},{"ruleId":"60","severity":1,"message":"96","line":11,"column":10,"nodeType":"62","messageId":"63","endLine":11,"endColumn":24},{"ruleId":"82","severity":1,"message":"83","line":95,"column":20,"nodeType":"84","messageId":"85","endLine":95,"endColumn":21,"fix":"97"},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'react' is defined but never used.","'Typography' is defined but never used.","'ResponsiveContainer' is defined but never used.","'Icon' is defined but never used.","'DeleteIcon' is defined but never used.","'styled' is defined but never used.","'spacing' is defined but never used.","'selectedBigthree' is assigned a value but never used.","'setId' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["100"],"'getBigthree' is assigned a value but never used.","rest-spread-spacing","Unexpected whitespace after spread property operator.","ExperimentalSpreadProperty","unexpectedWhitespace",{"range":"101","text":"102"},"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["98"],["99"],"'Avatar' is defined but never used.","'Divider' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'calendarFormat' is defined but never used.",{"range":"103","text":"102"},"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},[4224,4225],"",[2774,2775],"Update the dependencies array to be: [token]",{"range":"106","text":"107"},[3325,3327],"[token]"]