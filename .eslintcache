[{"/Users/morimotorikuto/Desktop/react-app/src/index.js":"1","/Users/morimotorikuto/Desktop/react-app/src/App.js":"2","/Users/morimotorikuto/Desktop/react-app/src/reportWebVitals.js":"3","/Users/morimotorikuto/Desktop/react-app/src/components/DrfApiFetch.js":"4","/Users/morimotorikuto/Desktop/react-app/src/components/login.js":"5"},{"size":500,"mtime":1609860174756,"results":"6","hashOfConfig":"7"},{"size":974,"mtime":1612683690419,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609860174756,"results":"9","hashOfConfig":"7"},{"size":13360,"mtime":1613036882141,"results":"10","hashOfConfig":"7"},{"size":6552,"mtime":1613028410943,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"xl0ttc",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"23","usedDeprecatedRules":"14"},"/Users/morimotorikuto/Desktop/react-app/src/index.js",[],["24","25"],"/Users/morimotorikuto/Desktop/react-app/src/App.js",[],"/Users/morimotorikuto/Desktop/react-app/src/reportWebVitals.js",[],"/Users/morimotorikuto/Desktop/react-app/src/components/DrfApiFetch.js",["26","27","28","29","30"],"/Users/morimotorikuto/Desktop/react-app/src/components/login.js",["31"],"import {React, useState} from 'react'\nimport axios from 'axios'\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, Typography } from '@material-ui/core'\n\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\n\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(10),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', \n        marginTop: theme.spacing(1),\n    },\n    submit: {\n    margin: theme.spacing(3, 0, 2),\n    },\n    span: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        color: 'teal',\n    },\n    spanError: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        color: 'fuchsia',\n        marginTop: 10,\n    },\n}));\n\nconst Login = (props) => {\n    const classes = useStyles();\n    const [flag, setFlag] = useState({loginerr: false, createerr: false, createdone:false})\n    const [credentials, setCredentials] = useState({username:'', password:''})\n    const [newUser, setNewUser] = useState({username:'', password:''})\n\n    const login = (evt) => {\n        const data = {\n            username: credentials.username,\n            password: credentials.password\n        }\n        \n        axios.post(\"http://18.183.227.181/auth/\", data,{\n            headers: {\n                'Content-Type': 'application/json',\n            }})\n            .then(res =>{            \n                props.setUserInfo({username: credentials.username,token: res.data.token})\n            })\n            .catch(err =>{\n                setFlag({loginerr:true})\n                console.log(err)\n            })\n    }\n\n    const create = (evt) =>{\n        const data = {\n            username: newUser.username,\n            password: newUser.password\n        }\n        console.log(data)\n        axios.post(\"http://18.183.227.181/api/v1/users/\", data,{\n            headers: {\n                'Content-Type': 'application/json',\n            }})\n            .then(res =>{\n                setFlag({createdone:true})\n            })\n            .catch(err =>{\n                setFlag({createerr:true})\n                console.log(err)\n                \n            })\n    }\n\n    const handleInputChange = (handle, userinfo) => evt => {\n        const value = evt.target.value;\n        const name = evt.target.name;\n        handle({... userinfo, [name]:value})\n    }    \n\n    return (\n        <Container component=\"main\" >\n            \n            <div className={classes.paper}>\n            \n                <Typography variant=\"h2\">1RM(Rep Max)管理サイト</Typography>\n                <Typography component=\"h1\" variant=\"h3\">Sign in</Typography>\n                \n                <label>\n                    <TextField \n                    variant=\"outlined\" \n                    margin=\"normal\" \n                    fullWidth \n                    required\n                    name=\"username\"\n                    label=\"ユーザー名\"\n                    value={credentials.username} \n                    Autocomplete=\"current-username\"\n                    onChange={handleInputChange(setCredentials, credentials)} \n                    autoFocus\n                    />\n                </label>\n                <label>\n                    <TextField \n                    variant=\"outlined\" \n                    margin=\"normal\" \n                    fullWidth \n                    required\n                    name=\"password\"\n                    label=\"パスワード\"\n                    value={credentials.password} \n                    Autocomplete=\"current-password\"\n                    onChange={handleInputChange(setCredentials, credentials)} \n                    autoFocus\n                    />\n                </label>\n                <br />\n                <Button \n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                onClick={() => login()}>Login</Button>\n                { flag.loginerr && (<h1>ユーザー名，もしくはパスワードが間違っています</h1>)}\n                <h4>新規登録される場合は↓↓↓</h4>\n                <Typography component=\"h1\" variant=\"h3\">Create User</Typography>\n                <label>        \n                    <TextField \n                    variant=\"outlined\" \n                    margin=\"normal\" \n                    fullWidth \n                    required\n                    name=\"username\"\n                    label=\"ユーザー名\"\n                    value={newUser.username} \n                    Autocomplete=\"current-username\"\n                    onChange={handleInputChange(setNewUser, newUser)} \n                    autoFocus\n                    />\n                </label>                \n                <label>                    \n                    <TextField \n                    variant=\"outlined\" \n                    margin=\"normal\" \n                    fullWidth \n                    required\n                    name=\"password\"\n                    label=\"パスワード\"\n                    value={newUser.password} \n                    Autocomplete=\"current-password\"\n                    onChange={handleInputChange(setNewUser, newUser)} \n                    autoFocus\n                    />\n                </label>                \n                <Button \n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                onClick={() => create()}>User create</Button>\n                { flag.createerr &&\n                <ul>\n                <h2>以下のエラーに該当しています</h2>\n                <li><h1>既に登録済みのユーザー名</h1></li>\n                <li><h1>ユーザー名，パスワードが無効な値</h1></li>\n                <h4>別のユーザー名，パスワードでリトライして下さい</h4>\n                </ul>\n                }\n                {flag.createdone &&\n                    <ul>\n                        ユーザー登録が完了しました．Login formからログインしてください．\n                    </ul>\n                }            \n            </div>\n        \n        </Container>\n    )\n}\n\nexport default Login;",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":3,"column":56,"nodeType":"38","messageId":"39","endLine":3,"endColumn":63},{"ruleId":"36","severity":1,"message":"40","line":94,"column":12,"nodeType":"38","messageId":"39","endLine":94,"endColumn":28},{"ruleId":"41","severity":1,"message":"42","line":107,"column":7,"nodeType":"43","endLine":107,"endColumn":9,"suggestions":"44"},{"ruleId":"45","severity":1,"message":"46","line":132,"column":31,"nodeType":"47","messageId":"48","endLine":132,"endColumn":32,"fix":"49"},{"ruleId":"50","severity":1,"message":"51","line":322,"column":38,"nodeType":"52","messageId":"53","endLine":322,"endColumn":39},{"ruleId":"45","severity":1,"message":"46","line":91,"column":20,"nodeType":"47","messageId":"48","endLine":91,"endColumn":21,"fix":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'Tooltip' is defined but never used.","Identifier","unusedVar","'selectedBigthree' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["57"],"rest-spread-spacing","Unexpected whitespace after spread property operator.","ExperimentalSpreadProperty","unexpectedWhitespace",{"range":"58","text":"59"},"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",{"range":"60","text":"59"},"no-global-assign","no-unsafe-negation",{"desc":"61","fix":"62"},[3969,3970],"",[2593,2594],"Update the dependencies array to be: [token]",{"range":"63","text":"64"},[3066,3068],"[token]"]